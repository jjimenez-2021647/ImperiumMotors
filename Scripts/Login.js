// Scripts/Login.js
// Sistema de autenticaci√≥n para Imperium Motors - Versi√≥n compatible

(function() {
    'use strict';
    
    console.log('üöó Imperium Motors - Sistema de Login cargado');

    // Simulaci√≥n de localStorage con usuarios de prueba
    const storage = {
        'admin@imperium.com': JSON.stringify({
            name: 'Admin Imperium',
            email: 'admin@imperium.com',
            password: '123456'
        }),
        'test@test.com': JSON.stringify({
            name: 'Usuario Test',
            email: 'test@test.com',
            password: 'password'
        })
    };

    // Variables globales para los elementos
    let loginForm = null;
    let registerForm = null;
    let toggleSwitch = null;
    let loginError = null;
    let registerSuccess = null;

    // Funciones de utilidad para almacenamiento
    function getUserFromStorage(email) {
        console.log('üîç Buscando usuario:', email);
        try {
            const userData = storage[email];
            const user = userData ? JSON.parse(userData) : null;
            console.log('üë§ Usuario encontrado:', user ? 'S√ç' : 'NO');
            return user;
        } catch (error) {
            console.error('‚ùå Error al obtener usuario:', error);
            return null;
        }
    }

    function saveUserToStorage(user) {
        console.log('üíæ Guardando usuario:', user.name);
        try {
            storage[user.email] = JSON.stringify(user);
            console.log('‚úÖ Usuario guardado correctamente');
            return true;
        } catch (error) {
            console.error('‚ùå Error al guardar usuario:', error);
            return false;
        }
    }

    function setCurrentUser(user) {
        console.log('üîê Estableciendo sesi√≥n para:', user.name);
        try {
            storage['currentUser'] = JSON.stringify(user);
            console.log('‚úÖ Sesi√≥n establecida');
        } catch (error) {
            console.error('‚ùå Error al guardar sesi√≥n:', error);
        }
    }

    // Funci√≥n para mostrar mensajes
    function showMessage(elementId, message, isSuccess = false, duration = 4000) {
        console.log(`üì¢ Mostrando mensaje (${isSuccess ? '√âXITO' : 'ERROR'}):`, message);
        
        const element = document.getElementById(elementId);
        if (!element) {
            console.error('‚ùå Elemento no encontrado:', elementId);
            return;
        }

        // Cambiar estilo seg√∫n el tipo de mensaje
        if (isSuccess) {
            element.style.color = '#155724';
            element.style.backgroundColor = '#d4edda';
            element.style.border = '1px solid #c3e6cb';
        } else {
            element.style.color = '#721c24';
            element.style.backgroundColor = '#f8d7da';
            element.style.border = '1px solid #f5c6cb';
        }

        element.textContent = message;
        element.style.display = 'block';
        element.style.opacity = '0';
        
        // Animaci√≥n de entrada
        requestAnimationFrame(() => {
            element.style.opacity = '1';
        });
        
        // Ocultar despu√©s del tiempo especificado
        setTimeout(() => {
            element.style.opacity = '0';
            setTimeout(() => {
                element.style.display = 'none';
            }, 300);
        }, duration);
    }

    function hideMessage(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.style.display = 'none';
        }
    }

    function clearForm(formId) {
        const form = document.getElementById(formId);
        if (form) {
            form.reset();
            console.log('üßπ Formulario limpiado:', formId);
        }
    }

    // Validaciones
    function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    function isValidPassword(password) {
        return password && password.length >= 6;
    }

    // Funci√≥n para manejar el login
    function handleLogin(event) {
        event.preventDefault();
        console.log('üîë Procesando login...');
        
        const formData = new FormData(event.target);
        const email = formData.get('email')?.trim() || '';
        const password = formData.get('password')?.trim() || '';
        
        console.log('üìß Email ingresado:', email);
        console.log('üîí Password ingresado:', password ? '***' : 'VAC√çO');
        
        // Limpiar mensajes previos
        hideMessage('login-error');
        
        // Validaciones b√°sicas
        if (!email || !password) {
            console.log('‚ùå Campos vac√≠os');
            showMessage('login-error', 'Por favor, completa ambos campos.');
            return;
        }
        
        if (!isValidEmail(email)) {
            console.log('‚ùå Email inv√°lido');
            showMessage('login-error', 'Por favor, ingresa un email v√°lido.');
            return;
        }
        
        // Buscar usuario
        const user = getUserFromStorage(email);
        
        if (!user) {
            console.log('‚ùå Usuario no encontrado');
            showMessage('login-error', 'El usuario no existe. Por favor, reg√≠strate primero.');
            return;
        }
        
        if (user.password !== password) {
            console.log('‚ùå Contrase√±a incorrecta');
            showMessage('login-error', 'Contrase√±a incorrecta. Int√©ntalo de nuevo.');
            return;
        }
        
        // Login exitoso
        console.log('‚úÖ Login exitoso para:', user.name);
        showMessage('login-error', `¬°Bienvenido ${user.name}! Redirigiendo...`, true, 2000);
        
        // Guardar sesi√≥n
        setCurrentUser({
            name: user.name,
            email: user.email,
            loginTime: new Date().toISOString()
        });
        
        // Limpiar formulario
        clearForm('login-form');
        
        // Simular redirecci√≥n
        setTimeout(() => {
            alert(`¬°Bienvenido ${user.name}!\n\nEn un proyecto real, aqu√≠ se redirigir√≠a a PaginaPrincipal.html`);
            console.log('üéâ Usuario logueado exitosamente:', user.name);
        }, 2000);
    }

    // Funci√≥n para manejar el registro
    function handleRegister(event) {
        event.preventDefault();
        console.log('üìù Procesando registro...');
        
        const formData = new FormData(event.target);
        const name = formData.get('name')?.trim() || '';
        const email = formData.get('email')?.trim() || '';
        const password = formData.get('password')?.trim() || '';
        
        console.log('üë§ Datos de registro:', { name, email, password: password ? '***' : 'VAC√çO' });
        
        // Limpiar mensajes previos
        hideMessage('register-success');
        
        // Validaciones b√°sicas
        if (!name || !email || !password) {
            console.log('‚ùå Campos incompletos');
            showMessage('register-success', 'Por favor, completa todos los campos.');
            return;
        }
        
        if (name.length < 2) {
            console.log('‚ùå Nombre muy corto');
            showMessage('register-success', 'El nombre debe tener al menos 2 caracteres.');
            return;
        }
        
        if (!isValidEmail(email)) {
            console.log('‚ùå Email inv√°lido');
            showMessage('register-success', 'Por favor, ingresa un email v√°lido.');
            return;
        }
        
        if (!isValidPassword(password)) {
            console.log('‚ùå Contrase√±a muy corta');
            showMessage('register-success', 'La contrase√±a debe tener al menos 6 caracteres.');
            return;
        }
        
        // Verificar si el usuario ya existe
        if (getUserFromStorage(email)) {
            console.log('‚ùå Usuario ya existe');
            showMessage('register-success', 'Este email ya est√° registrado. Ve al login para iniciar sesi√≥n.');
            
            // Cambiar al login despu√©s de 2 segundos
            setTimeout(() => {
                if (toggleSwitch) {
                    toggleSwitch.checked = false;
                    console.log('üîÑ Cambiando a formulario de login');
                }
            }, 2000);
            return;
        }
        
        // Guardar nuevo usuario
        const newUser = { name, email, password };
        const saved = saveUserToStorage(newUser);
        
        if (!saved) {
            console.log('‚ùå Error al guardar');
            showMessage('register-success', 'Error al registrar usuario. Int√©ntalo de nuevo.');
            return;
        }
        
        // Registro exitoso
        console.log('‚úÖ Registro exitoso para:', name);
        showMessage('register-success', `¬°Registro exitoso, ${name}! Cambiando al login...`, true);
        
        // Limpiar formulario
        clearForm('register-form');
        
        // Cambiar al login despu√©s de mostrar el mensaje
        setTimeout(() => {
            if (toggleSwitch) {
                toggleSwitch.checked = false;
                console.log('üîÑ Cambiando a formulario de login tras registro');
            }
        }, 2500);
    }

    // Funci√≥n para manejar el toggle
    function handleToggle() {
        console.log('üîÑ Toggle cambiado');
        setTimeout(() => {
            clearForm('login-form');
            clearForm('register-form');
            hideMessage('login-error');
            hideMessage('register-success');
        }, 100);
    }

    // Funci√≥n para encontrar elementos del DOM
    function findElements() {
        loginForm = document.getElementById('login-form');
        registerForm = document.getElementById('register-form');
        toggleSwitch = document.querySelector('.toggle');
        loginError = document.getElementById('login-error');
        registerSuccess = document.getElementById('register-success');

        console.log('üîç Elementos encontrados:');
        console.log('  - Login form:', loginForm ? '‚úÖ' : '‚ùå');
        console.log('  - Register form:', registerForm ? '‚úÖ' : '‚ùå');
        console.log('  - Toggle switch:', toggleSwitch ? '‚úÖ' : '‚ùå');
        console.log('  - Login error:', loginError ? '‚úÖ' : '‚ùå');
        console.log('  - Register success:', registerSuccess ? '‚úÖ' : '‚ùå');

        return loginForm && registerForm && toggleSwitch && loginError && registerSuccess;
    }

    // Funci√≥n para agregar event listeners
    function addEventListeners() {
        if (loginForm) {
            loginForm.addEventListener('submit', handleLogin);
            console.log('‚úÖ Event listener agregado al formulario de login');
        }

        if (registerForm) {
            registerForm.addEventListener('submit', handleRegister);
            console.log('‚úÖ Event listener agregado al formulario de registro');
        }

        if (toggleSwitch) {
            toggleSwitch.addEventListener('change', handleToggle);
            console.log('‚úÖ Event listener agregado al toggle');
        }
    }

    // Funci√≥n principal de inicializaci√≥n
    function initialize() {
        console.log('üöÄ Inicializando sistema de autenticaci√≥n...');

        const elementsFound = findElements();
        
        if (!elementsFound) {
            console.log('‚è≥ Algunos elementos no encontrados, reintentando en 100ms...');
            setTimeout(initialize, 100);
            return;
        }

        addEventListeners();

        // Mostrar usuarios de prueba disponibles
        console.log('üìã Usuarios de prueba disponibles:');
        console.log('  - Email: admin@imperium.com | Password: 123456');
        console.log('  - Email: test@test.com | Password: password');
        
        console.log('üéØ Sistema de autenticaci√≥n listo para usar');
        
        // Marcar como inicializado
        window.imperiumAuthReady = true;
    }

    // M√∫ltiples estrategias de inicializaci√≥n
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
        console.log('‚è≥ Esperando DOMContentLoaded...');
    } else if (document.readyState === 'interactive' || document.readyState === 'complete') {
        initialize();
    }

    // Backup adicional
    setTimeout(initialize, 500);
    setTimeout(initialize, 1000);

})();